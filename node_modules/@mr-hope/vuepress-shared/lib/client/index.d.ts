import * as vue from 'vue';
import { VNode, ComputedRef, ObjectDirective } from 'vue';
import { LocaleData } from '@vuepress/core';
import * as vue_router from 'vue-router';
import { RouteLocationNormalizedLoaded, Router } from 'vue-router';

declare const capitalize: (word: string) => string;
declare const strictCapitalize: (word: string) => string;

interface DateOptions {
    /**
     * @default 'en'
     */
    lang?: string;
    timezone?: string;
    /**
     * @default 'full'
     */
    type?: "date" | "time" | "full";
}
interface DateDetail {
    year: number;
    month: number;
    day: number;
    hour: number;
    minute: number;
    second: number;
}
interface DateInfo {
    display: string;
    value: Date | undefined;
    detail: Partial<DateDetail>;
}
declare const timeTransformer: (date: Date, options?: DateOptions) => string;
declare const getDate: (date: string | Date | undefined, options?: DateOptions) => DateInfo | null;
declare const compareDate: (dateA: Date | number | string | undefined, dateB: Date | number | string | undefined) => number;

declare type AuthorInfo = {
    name: string;
    url?: string;
};
declare type Author = string | string[] | AuthorInfo | AuthorInfo[];

declare type ConvertLocaleConfig<T extends LocaleData = LocaleData> = Record<string, T>;

declare const getAuthor: (author: Author | false | undefined, canDisable?: boolean) => AuthorInfo[];
declare const getCategory: (category: string[] | string | undefined) => string[];
declare const getTag: (tag: string[] | string | undefined) => string[];

/**
 * check if string is a valid url
 */
declare const isUrl: (test: string) => boolean;
declare const isAbsoluteUrl: (test: string) => boolean;

/**
 * Icon Base Component
 */
declare const IconBase: vue.DefineComponent<{
    name: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, () => VNode, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{
    name: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    name: string;
    color: string;
}>;

/**
 * Get current locale config
 *
 * @param localesConfig client locale Config
 * @returns current locale config
 */
declare const useLocaleConfig: <T>(localesConfig: ConvertLocaleConfig<T>) => ComputedRef<T>;

declare type PageTitleRef = ComputedRef<string>;
declare const usePageTitle: () => PageTitleRef;

/**
 * Forked from https://github.com/element-plus/element-plus/blob/dev/packages/directives/click-outside/index.ts
 *
 * MIT License
 *
 * Copyright (c) 2020-PRESENT Element Plus
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

declare const clickOutSideDirective: ObjectDirective;

declare const generateIndexfromHash: (content: string, total: number) => number;

declare const getHash: (path: string) => string | void;
declare const normalizePath: (path: string) => string;
declare const isActiveLink: (route: RouteLocationNormalizedLoaded, link?: string | undefined) => boolean;

/**
 * Forked and edited from https://github.com/vxhly/vuepress-plugin-one-click-copy/blob/master/bin/Message.js
 *
 * MIT License
 *
 * Copyright (c) 2019 vxhly <pengchengou@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * Â© 2019 GitHub, Inc.
 */

declare class Message {
    private containerElement;
    constructor();
    pop(html: string, duration?: number): void;
    close(messageElement: HTMLDivElement): void;
}

/**
 * Sort the given array randomly
 */
declare const randomSortArray: <T = unknown>(array: T[], intensity?: number) => T[];

/**
 * Resolve a route with redirection
 */
declare const resolveRouteWithRedirect: (router: Router, to: vue_router.RouteLocationRaw, currentLocation?: vue_router.RouteLocationNormalizedLoaded | undefined) => ReturnType<Router["resolve"]>;

export { IconBase, Message, PageTitleRef, capitalize, clickOutSideDirective, compareDate, generateIndexfromHash, getAuthor, getCategory, getDate, getHash, getTag, isAbsoluteUrl, isActiveLink, isUrl, normalizePath, randomSortArray, resolveRouteWithRedirect, strictCapitalize, timeTransformer, useLocaleConfig, usePageTitle };

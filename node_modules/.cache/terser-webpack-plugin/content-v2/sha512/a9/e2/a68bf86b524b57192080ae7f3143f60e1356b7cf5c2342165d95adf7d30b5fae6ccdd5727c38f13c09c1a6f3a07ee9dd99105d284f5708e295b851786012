{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{535:function(t,e,a){\"use strict\";a.r(e);var s=a(30),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"blockquote\",[a(\"p\",[t._v(\"这个教程是基于你一无所知的情况下编写的\")])]),t._v(\" \"),a(\"h1\",{attrs:{id:\"连接github与本地\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#连接github与本地\"}},[t._v(\"#\")]),t._v(\" 连接Github与本地\")]),t._v(\" \"),a(\"p\",[t._v(\"首先右键打开git bash，然后输入下面命令：\")]),t._v(\" \"),a(\"p\",[t._v(\"在本地计算机配置Git全局变量。 输入以下命令：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" config --global user.name \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"Zervan29131\"')]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" config --global user.email \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"1162685484@qq.com\"')]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"用户名和邮箱根据你注册github的信息自行修改。位置位于\"),a(\"code\",[t._v(\"C:\\\\Users\\\\zervan\\\\.gitconfig\")])]),t._v(\" \"),a(\"p\",[t._v(\"然后生成密钥SSH key：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[t._v(\"$ ssh-keygen -t rsa -C \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"1162685484@qq.com\"')]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"密钥类型可以用\"),a(\"code\",[t._v(\"-t\")]),t._v(\"  选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。\\n同时在密钥中有一个注释字段，用\"),a(\"code\",[t._v(\"-c\")]),t._v(\"来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行,当然，如果不想要这些可以直接输入：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"$ ssh-keygen\\n\")])])]),a(\"p\",[t._v(\"输入完毕后按回车，程序会要求输入一个密码，输入完密码后按回车会要求再确认一次密码，如果不想要密码可以在要求输入密码的时候按两次回车，表示密码为空，并且确认密码为空，此时**[c盘>用户>自己的用户名>.ssh]**目录下已经生成好了。\")]),t._v(\" \"),a(\"p\",[t._v(\"打开github，在头像下面点击\"),a(\"code\",[t._v(\"settings\")]),t._v(\"，再点击\"),a(\"code\",[t._v(\"SSH and GPG keys\")]),t._v(\"，新建一个SSH，名字随便。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"这个ssh密钥不是必须要新建的，.ssh文件里面有之前创建好的也可以用，能连到github就行了\")])]),t._v(\" \"),a(\"p\",[t._v(\"添加SSH key到Github，git bash中输入\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"cat\")]),t._v(\" ~/.ssh/id_rsa.pub\\n\")])])]),a(\"p\",[t._v(\"将输出的内容复制到Github的SSH框中，点击确定保存。\")]),t._v(\" \"),a(\"p\",[t._v(\"检测SSH key，输入\"),a(\"code\",[t._v(\"ssh -T git@github.com\")]),t._v(\"，如果如下所示，出现你的用户名，那就成功了。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"weiya@weiyang MINGW64 /d/study/progr am/blog (master)\\n$ ssh -T git@github. com \\nwarning: Per manently added the RSA host key for IP address ' 52.74.223.119' to th\\ne list of known hosts \\nHi godweiyang! You ve successful ly autherticated. butdoes not provide sh\\ne11 access.\\n\")])])]),a(\"h1\",{attrs:{id:\"支持-git-的部署插件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#支持-git-的部署插件\"}},[t._v(\"#\")]),t._v(\" 支持 Git 的部署插件\")]),t._v(\" \"),a(\"p\",[t._v(\"另外我们还需要额外安装一个支持 Git 的部署插件，名字叫做 hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"Deployer not found: git\\n\")])])]),a(\"p\",[t._v(\"好，那就让我们安装下这个插件，在项目目录下执行安装命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install hexo-deployer-git --save\\n\")])])]),a(\"p\",[t._v(\"安装成功之后，执行部署命令：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo deploy\\n\")])])]),a(\"p\",[t._v(\"运行结果类似如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"INFO Deploying: git\\nINFO Clearing .deploy_ git folder...\\nINFO Copying files from public folder...\\nINFO Copying files from extend dirs...\\nOn branch master\\nnothing to commit, working directory clean\\nCounting objects: 46，done.\\nDelta compression using up to 8 threads.\\nCompressing objects: 100% (36/36)， done.\\nWriting objects: 100% (46/46)， 507.66 KiBI 0 bytes/s， done.\\nTotal 46 (delta 3)， reused 0 (delta 0)\\nremote: Resolving deltas: 100% (3/3)， done.\\nTo git@github. com:NightTeam/ nightteam. github.io.git\\n*  [new branch]\\t\\tHEAD -> master\\nBranch master set up to track remote branch master from git@github. com:Night1\\nINFO Deploy done: git\\n\")])])]),a(\"p\",[t._v(\"这时我们的博客已经成功部署到 GitHub Pages 上面了，我们访问一下 GitHub Repository 同名的链接，就可以看到跟我们博客的内容了。\")]),t._v(\" \"),a(\"p\",[t._v(\"这时候我们去 GitHub 上面看看 Hexo 上传了什么内容，打开之后可以看到 master 分支是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果你博客的源码也想放到 GitHub 上，我们可以新建一个 source 分支，代表博客源码的意思。\")]),t._v(\" \"),a(\"p\",[t._v(\"具体的添加过程就很简单了，参加如下命令：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('git init\\ngit checkout -b source\\ngit add -A\\ngit commit -m \"init blog\"\\ngit remote add origin git@github.com:{username}/{username}.github.io.git\\ngit push origin source\\n')])])]),a(\"p\",[t._v(\"成功之后，可以到 GitHub 上再切换下默认分支，比如我就把默认的分支设置为了 source，当然不换也可以。\")]),t._v(\" \"),a(\"p\",[t._v(\"完成如上内容之后，实际上我们只完成了博客搭建的一小步，因为我们仅仅是把初始化的页面部署成功了，博客里面还没有设置任何有效的信息。\")]),t._v(\" \"),a(\"h1\",{attrs:{id:\"配置站点信息\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置站点信息\"}},[t._v(\"#\")]),t._v(\" 配置站点信息\")]),t._v(\" \"),a(\"p\",[t._v(\"下面就让我们来进行一下博客的基本配置，另外换一个好看的主题，配置一些其他的内容，让博客真正变成属于我们自己的博客。\")]),t._v(\" \"),a(\"p\",[t._v(\"下面我就需要修改一些基本的配置，比如站点名、站点描述等等。\")]),t._v(\" \"),a(\"p\",[t._v(\"修改根目录下的 ``_config.yml `文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('# Site\\ntitle: WaterMelon\\nsubtitle: 一个专注技术的组织\\ndescription: 涉猎的主要编程语言为 Python、Rust、C++、Go，领域涵盖爬虫、深度学习、服务研发和对象存储等。\\nkeywords: \"Python, Rust, C++, Go, 爬虫, 深度学习, 服务研发, 对象存储\"\\nauthor: zervan\\n')])])]),a(\"p\",[t._v(\"另外还可以设置一下语言，如果要设置为汉语的话可以将 language 的字段设置为 zh-CN，如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"language: zh-CN\\n\")])])]),a(\"p\",[t._v(\"这样就完成了站点基本信息的配置。\")]),t._v(\" \"),a(\"h1\",{attrs:{id:\"写文章、发布文章\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#写文章、发布文章\"}},[t._v(\"#\")]),t._v(\" 写文章、发布文章\")]),t._v(\" \"),a(\"p\",[t._v(\"首先在博客根目录下右键打开git bash，安装一个扩展\"),a(\"code\",[t._v(\"npm i hexo-deployer-git\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后输入\"),a(\"code\",[t._v('hexo new post \"article title\"')]),t._v(\"，新建一篇文章。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后打开\"),a(\"code\",[t._v(\"D:\\\\study\\\\program\\\\blog\\\\source\\\\_posts\")]),t._v(\"的目录，可以发现下面多了一个文件夹和一个\"),a(\"code\",[t._v(\".md\")]),t._v(\"文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。\")]),t._v(\" \"),a(\"p\",[t._v(\"编写完markdown文件后，根目录下输入\"),a(\"code\",[t._v(\"hexo g\")]),t._v(\"生成静态网页，然后输入\"),a(\"code\",[t._v(\"hexo s\")]),t._v(\"可以本地预览效果，最后 输入\"),a(\"code\",[t._v(\"hexo d\")]),t._v(\"上传到github上。这时打开你的github.io主页就能看到发布的文章啦。\")]),t._v(\" \"),a(\"h1\",{attrs:{id:\"绑定域名\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#绑定域名\"}},[t._v(\"#\")]),t._v(\" 绑定域名\")]),t._v(\" \"),a(\"p\",[t._v(\"现在默认的域名还是\"),a(\"code\",[t._v(\"xxx.github.io\")]),t._v(\"，如果想弄一个专属域名，可以购买一个域名。\")]),t._v(\" \"),a(\"p\",[t._v(\"打开你的github博客项目，点击\"),a(\"code\",[t._v(\"settings\")]),t._v(\"，拉到下面\"),a(\"code\",[t._v(\"Custom domain\")]),t._v(\"处，填上你自己的域名，保存：\")]),t._v(\" \"),a(\"p\",[t._v(\"这时候你的项目根目录应该会出现一个名为\"),a(\"code\",[t._v(\"CNAME\")]),t._v(\"的文件了。如果没有的话，打开你本地博客\"),a(\"code\",[t._v(\"/source\")]),t._v(\"目录，我的是\"),a(\"code\",[t._v(\"D:\\\\study\\\\program\\\\blog\\\\source\")]),t._v(\"，新建\"),a(\"code\",[t._v(\"CNAME\")]),t._v(\"文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行\"),a(\"code\",[t._v(\"hexo g\")]),t._v(\"、\"),a(\"code\",[t._v(\"hexo d\")]),t._v(\"上传到github。\")]),t._v(\" \"),a(\"p\",[t._v(\"#　备份博客源文件\")]),t._v(\" \"),a(\"p\",[t._v(\"如果我们想换一台电脑继续写博客，就可以将博客目录下的所有源文件都上传到github上面。\")]),t._v(\" \"),a(\"p\",[t._v(\"首先在github博客仓库下新建一个分支\"),a(\"code\",[t._v(\"hexo\")]),t._v(\"，然后\"),a(\"code\",[t._v(\"git clone\")]),t._v(\"到本地，把\"),a(\"code\",[t._v(\".git\")]),t._v(\"文件夹拿出来，放在博客根目录下。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后\"),a(\"code\",[t._v(\"git branch -b hexo\")]),t._v(\"切换到\"),a(\"code\",[t._v(\"hexo\")]),t._v(\"分支，然后\"),a(\"code\",[t._v(\"git add .\")]),t._v(\"，然后\"),a(\"code\",[t._v('git commit -m \"xxx\"')]),t._v(\"，最后\"),a(\"code\",[t._v(\"git push origin hexo\")]),t._v(\"提交就行了。\")]),t._v(\" \"),a(\"p\",[t._v(\"当然我新建了一个仓库存放了源文件，具体效果可以看我的博客源文件仓库：\")]),t._v(\" \"),a(\"p\",[t._v(\"大家也可以先用下文hexo安装方法安装完hexo，然后直接\"),a(\"code\",[t._v(\"git clone git@github.com:godweiyang/hexo-matery-modified.git\")]),t._v(\"克隆我的所有源文件，然后这是我修改完的基本没bug的定制化的博客，就可以直接拿来用啦。\")]),t._v(\" \"),a(\"h1\",{attrs:{id:\"网站按照seo-优化-被谷歌和百度收录\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网站按照seo-优化-被谷歌和百度收录\"}},[t._v(\"#\")]),t._v(\" 网站按照seo 优化，被谷歌和百度收录\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"部署至github-pages\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#部署至github-pages\"}},[t._v(\"#\")]),t._v(\" 部署至GitHub Pages\")]),t._v(\" \"),a(\"p\",[t._v(\"接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。\")]),t._v(\" \"),a(\"p\",[t._v(\"我们可以通过 Hexo 提供给我们的一个命令直接将博客一键部署到 GitHub Pages 上面去，不需要手动去配置服务器或进行其他的各项配置。\")]),t._v(\" \"),a(\"p\",[t._v(\"部署命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo deploy\\n\")])])]),a(\"p\",[t._v(\"在部署之前，我们需要先知道博客的部署地址，它需要对应 GitHub 的一个 Repository 的地址，这个信息需要我们来配置一下。\")]),t._v(\" \"),a(\"p\",[t._v(\"打开根目录下的\"),a(\"code\",[t._v(\"_config.yml\")]),t._v(\" 文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。\")]),t._v(\" \"),a(\"p\",[t._v(\"找到 \"),a(\"code\",[t._v(\"# Deployment\")]),t._v(\"这个地方，\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"repository修改为你自己的github项目地址。\")]),t._v(\" \"),a(\"p\",[t._v(\"repo: {git repo ssh address}\")])]),t._v(\" \"),a(\"p\",[t._v(\"最终修改为如下内容：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# Deployment\\n## Docs: https:/ /hexo.io/docs/deployment.html\\ndeploy:\\n  type: git\\n  repo: https://github.com/Zervan29131/ZervanBlog.git\\n  github-token: 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1\\n  branch: master\\n\")])])]),a(\"blockquote\",[a(\"p\",[t._v(\"指定分支为branch: master\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"可能\")]),t._v(\"需要更改为 branch: main\")])]),t._v(\" \"),a(\"p\",[t._v(\"需要获取taken\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"github-token: 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\")])]),t._v(\" \"),a(\"h1\",{attrs:{id:\"\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#\"}},[t._v(\"#\")])]),t._v(\" \"),a(\"h1\",{attrs:{id:\"建立博客\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#建立博客\"}},[t._v(\"#\")]),t._v(\" 建立博客\")]),t._v(\" \"),a(\"p\",[t._v(\"Github Pages提供了免费的服务器承载简单的博客，你只需要在仓库的设置选项中开启Github Pages功能，博客就自动生成了，GitHub提供了很多的模板供选择，同时你也可以自己从头编写。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"准备条件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#准备条件\"}},[t._v(\"#\")]),t._v(\" 准备条件\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"服务器\")]),t._v(\" \"),a(\"li\",[t._v(\"数据库\")]),t._v(\" \"),a(\"li\",[t._v(\"注册域名\")])]),t._v(\" \"),a(\"p\",[t._v(\"如果这些都没有的话，没事，照样是能搭建一个博客的。\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"GitHub 提供了 GitHub Pages 帮助我们来架设一个静态网站，解决了服务器的问题。\")]),t._v(\" \"),a(\"li\",[t._v(\"Hexo的轻量级博客框架是直接使用MarkDown进行创作的，可以直接将文章编译成静态网页文件并发布。这样文章的内容、标题、标签等信息就不必存数据库里了，直接形成静态页面。解决了数据库的问题。\")]),t._v(\" \"),a(\"li\",[t._v(\"GitHub Pages 允许每个账户创建一个名为 {username}.\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=http%3A//github.io\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://github.io\"),a(\"OutboundLink\")],1),t._v(\" 的仓库。它会自动为这个仓库分配一个 \"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=http%3A//github.io\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://github.io\"),a(\"OutboundLink\")],1),t._v(\" 的二级域名，解决了域名的问题。如果想要自定义域名的话，当然也可以支持。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"新建项目\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#新建项目\"}},[t._v(\"#\")]),t._v(\" 新建项目\")]),t._v(\" \"),a(\"p\",[t._v(\"首先在 GitHub 新建一个仓库（Repository），名称为 {username}.\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=http%3A//github.io\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://github.io\"),a(\"OutboundLink\")],1),t._v(\"，注意这个名比较特殊，必须要是 \"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=http%3A//github.io\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://github.io\"),a(\"OutboundLink\")],1),t._v(\" 为后缀结尾的。比如 NightTeam 的 GitHub 用户名就叫 NightTeam，那我就新建一个 \"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=http%3A//nightteam.github.io\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://nightteam.github.io\"),a(\"OutboundLink\")],1),t._v(\"，新建完成之后就可以进行后续操作了。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"如果 GitHub 没有配置 SSH 连接的建议配置一下，这样后面在部署博客的时候会很方便。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"配置环境\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置环境\"}},[t._v(\"#\")]),t._v(\" 配置环境\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"安装-node-js\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装-node-js\"}},[t._v(\"#\")]),t._v(\" 安装 Node.js\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"安装git工具\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装git工具\"}},[t._v(\"#\")]),t._v(\" 安装git工具\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"安装-hexo\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装-hexo\"}},[t._v(\"#\")]),t._v(\" 安装 Hexo\")]),t._v(\" \"),a(\"p\",[t._v(\"Hexo是一个博客框架，官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客。\")]),t._v(\" \"),a(\"p\",[t._v(\"在合适的地方新建MyHexoBlogs文件夹用来存放个人博客文件。\")]),t._v(\" \"),a(\"p\",[t._v(\"在该目录下右键点击\"),a(\"code\",[t._v(\"Git Bash Here\")]),t._v(\"，打开git的控制台窗口，安装命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install -g hexo-cli\\n\")])])]),a(\"p\",[t._v(\"安装完成之后，输入\"),a(\"code\",[t._v(\"hexo -v\")]),t._v(\"验证是否安装成功。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"初始化项目\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#初始化项目\"}},[t._v(\"#\")]),t._v(\" 初始化项目\")]),t._v(\" \"),a(\"p\",[t._v(\"在MyBlogs文件夹下新建mysite项目，并对其进行初始化。\")]),t._v(\" \"),a(\"p\",[t._v(\"输入\"),a(\"code\",[t._v(\"hexo init\")]),t._v(\"初始化文件夹，\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo init mysite\\n\")])])]),a(\"p\",[t._v(\"输入\"),a(\"code\",[t._v(\"cd\")]),t._v(\"进入文件夹，\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"cd mysite\\n\")])])]),a(\"p\",[t._v(\"接着输入\"),a(\"code\",[t._v(\"npm install\")]),t._v(\"安装必备的组件。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install\\n\")])])]),a(\"p\",[t._v(\"此时，会在MyBlogs文件夹下新建mysite文件夹，并在其内部生成相应的项目文件。\")]),t._v(\" \"),a(\"p\",[t._v(\"这样mysite文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹。\")]),t._v(\" \"),a(\"p\",[t._v(\"接下来我们首先进入新生成的文件夹里面，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo generate\\n\")])])]),a(\"p\",[t._v(\"可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo serve\\n\")])])]),a(\"p\",[t._v(\"运行之后命令行输出如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"INFO  Start processing\\nINFO  Hexois running at http://localhost:4000 . Press Ctrl+C to stop \\n\")])])]),a(\"p\",[t._v(\"此时在本地打开浏览器，通过http://localhost:4000便可访问基于Hexo的个人博客主页了。\")]),t._v(\" \"),a(\"p\",[t._v(\"这样一个博客的框架就出来了。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"修改主题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#修改主题\"}},[t._v(\"#\")]),t._v(\" 修改主题\")]),t._v(\" \"),a(\"p\",[t._v(\"目前来看，整个页面的样式个人感觉并不是那么好看，想换一个风格，这就涉及到主题的配置了。目前 Hexo 里面应用最多的主题基本就是 Next 主题了，个人感觉这个主题还是挺好看的，另外它支持的插件和功能也极为丰富，配置了这个主题，我们的博客可以支持更多的扩展功能，比如阅览进度条、中英文空格排版、图片懒加载等等。\")]),t._v(\" \"),a(\"p\",[t._v(\"那么首先就让我们来安装下 Next 这个主题吧，目前 Next 主题已经更新到 7.x 版本了，我们可以直接到 Next 主题的 GitHub Repository 上把这个主题下载下来。\")]),t._v(\" \"),a(\"p\",[t._v(\"主题的 GitHub 地址是：\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//github.com/theme-next/hexo-theme-next\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://github.com/theme-next/hexo-theme-next\"),a(\"OutboundLink\")],1),t._v(\"，我们可以直接把 master 分支 Clone 下来。\")]),t._v(\" \"),a(\"p\",[t._v(\"首先命令行进入到项目的根目录，执行如下命令即可：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"git clone https://github.com/theme-next/hexo-theme-next themes/next\\n\")])])]),a(\"p\",[t._v(\"执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后我们需要修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"theme: next\\n\")])])]),a(\"p\",[t._v(\"然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了，预览效果如下：\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"主题配置\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主题配置\"}},[t._v(\"#\")]),t._v(\" 主题配置\")]),t._v(\" \"),a(\"p\",[t._v(\"现在我们已经成功切换到 next 主题上面了，接下来我们就对主题进行进一步地详细配置吧，比如修改样式、增加其他各项功能的支持，下面逐项道来。\")]),t._v(\" \"),a(\"p\",[t._v(\"Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"favicon\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#favicon\"}},[t._v(\"#\")]),t._v(\" favicon\")]),t._v(\" \"),a(\"p\",[t._v(\"favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。\")]),t._v(\" \"),a(\"p\",[t._v(\"图标下载下来之后把它放在 themes/next/source/images 目录下面。\")]),t._v(\" \"),a(\"p\",[t._v(\"配置完成之后刷新页面，整个页面的标签图标就被更新了。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"avatar\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#avatar\"}},[t._v(\"#\")]),t._v(\" avatar\")]),t._v(\" \"),a(\"p\",[t._v(\"avatar 这个就类似站点的头像，如果设置了这个，会在站点的作者信息旁边额外显示一个头像，比如我这边有一张 avatar.png\")]),t._v(\" \"),a(\"p\",[t._v(\"将其放置到 themes/next/source/images/avatar.png 路径，然后在主题 _config.yml 文件下编辑 avatar 的配置，修改为正确的路径即可。\")]),t._v(\" \"),a(\"p\",[t._v(\"这里有 rounded 选项是是否显示圆形，rotated 是是否带有旋转效果，大家可以根据喜好选择是否开启。\")]),t._v(\" \"),a(\"p\",[t._v(\"配置完成之后就会显示头像。\")]),t._v(\" \"),a(\"p\",[t._v(\"enable 默认为 true，即默认显示。sidebar 如果设置为 true，按钮会出现在侧栏下方。scrollpercent 就是显示阅读百分比。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"gitalk\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gitalk\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"gitalk\")])]),t._v(\" \"),a(\"p\",[t._v(\"由于 Hexo 的博客是静态博客，而且也没有连接数据库的功能，所以它的评论功能是不能自行集成的，但可以集成第三方的服务。\")]),t._v(\" \"),a(\"p\",[t._v(\"Next 主题里面提供了多种评论插件的集成，有 changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte 这些。可以利用 GitHub 的 Issue 来当评论。\")]),t._v(\" \"),a(\"p\",[t._v(\"首先需要在 GitHub 上面注册一个 OAuth Application，链接为：\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//github.com/settings/applications/new\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://github.com/settings/applications/new\"),a(\"OutboundLink\")],1),t._v(\"，注册完毕之后拿到 Client ID、Client Secret 就可以了。\")]),t._v(\" \"),a(\"p\",[t._v(\"首先需要在 _config.yml 文件的 comments 区域配置使用 gitalk：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# Multiple Comment System Support\\ncomments:\\n  # Available values: tabs| buttons\\n  style: tabs\\n  # Choose a comment system to be displayed by default.\\n  # Available values: changyan | disqus| disqusjs| facebook_ .comments_ plugin\\n  active: gitalk\\n\")])])]),a(\"p\",[t._v(\"主要是 comments.active 字段选择对应的名称即可。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后找打 gitalk 配置，添加它的各项配置：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# Gitalk\\n# Demo: https://gitalk. github.io\\n# For more information: https://github. com/gita1k/gitalk\\ngitalk:\\n  enable: true\\n  github_ id: NightTeam\\n  repo: nightteam. github.io # Repository name to store issues\\n  client_ id: {your client id} # GitHub Application Client ID\\n  client_ secret: {your client secret} # GitHub Application Client Secret\\n  admin_ user: germey # GitHub repo owner and collaborators, only these guys C\\n  distraction_ free_ mode: true # Facebook-like distraction free mode\\n  # Gitalk's display language depends on user's browser or system environment\\n  # If you want everyone visiting your site to see a uniform language, you CE\\n  # Available values: en| es-ES| fr | ru| zh-CN| zh-TW\\n  language: zh-CN\\n\")])])]),a(\"p\",[t._v(\"配置完成之后 gitalk 就可以使用了，点击进入文章页面，GitHub 授权登录之后，评论的内容会自动出现在 Issue 里面。\")]),t._v(\" \"),a(\"p\",[t._v(\"供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//theme-next.org/docs/third-party-services/math-equations\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://theme-next.org/docs/third-party-services/math-equations\"),a(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"文章\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文章\"}},[t._v(\"#\")]),t._v(\" 文章\")]),t._v(\" \"),a(\"p\",[t._v(\"我们通过调用 Hexo 提供的命令，新建一篇「HelloWorld」的文章，命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo new hello-world\\n\")])])]),a(\"p\",[t._v(\"创建的文章会出现在 \"),a(\"code\",[t._v(\"source/_posts\")]),t._v(\" 文件夹下，是 MarkDown 格式。\")]),t._v(\" \"),a(\"p\",[t._v(\"在文章开头通过如下格式添加必要信息：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"---\\ntitle: 标题 # 自动创建，如hello-world\\ndate: 日期 # 自动创建，如2019-09-22 01:47:21\\ntags:\\n- 标签1\\n- 标签2\\n- 标签3\\ncategories:\\n- 分类1\\n- 分类2\\n---\\n\")])])]),a(\"p\",[t._v(\"开头下方撰写正文，MarkDown 格式书写即可。\")]),t._v(\" \"),a(\"p\",[t._v(\"这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/writing.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://hexo.io/zh-cn/docs/writing.html\"),a(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"标签页\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#标签页\"}},[t._v(\"#\")]),t._v(\" 标签页\")]),t._v(\" \"),a(\"p\",[t._v(\"现在我们的博客只有首页、文章页，如果我们想要增加标签页，可以自行添加，这里 Hexo 也给我们提供了这个功能，在根目录执行命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo new page tags\\n\")])])]),a(\"p\",[t._v(\"执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件，内容就只有这样子的：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"---\\ntitle: tags\\ndate:2021-04-01 17:41:16\\n---\\n\")])])]),a(\"p\",[t._v(\"我们可以自行添加一个 type 字段来指定页面的类型：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"type: tags\\ncomments:false \\n\")])])]),a(\"p\",[t._v(\"然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"menu:\\n  home: /|| home\\n  #about: /about/ || user\\n  tags: /tags/ || tags\\n  #categories: /categories/ || th\\n  archives: /archives/ || archive\\n  #schedule: /schedule/ || calendar\\n  #sitemap: /sitemap.xml || sitemap\\n  #commonweal: /404/ || heartbeat\\n\")])])]),a(\"p\",[t._v(\"这样重新本地启动看下页面状态，左侧导航也出现了标签，点击之后右侧会显示标签的列表。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"分类页\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分类页\"}},[t._v(\"#\")]),t._v(\" 分类页\")]),t._v(\" \"),a(\"p\",[t._v(\"分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo new page categories\\n\")])])]),a(\"p\",[t._v(\"然后同样地，会生成一个 source/categories/index.md 文件。\")]),t._v(\" \"),a(\"p\",[t._v(\"我们可以自行添加一个 type 字段来指定页面的类型：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"type: categories\\ncomments: false\\n\")])])]),a(\"p\",[t._v(\"然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"menu:\\n  home: / || home\\n  #about: /about/ || user\\n  tags: /tags/ || tags\\n  categories: /categories/ || th\\n  archives: /archives/ || archive\\n  #schedule: /schedule/ || calendar\\n  #sitemap: /sitemap.xml || sitemap\\n  #commonweal: /404/ || heartbeat\\n\")])])]),a(\"p\",[t._v(\"这样页面就会增加分类的支持。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"搜索页\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#搜索页\"}},[t._v(\"#\")]),t._v(\" 搜索页\")]),t._v(\" \"),a(\"p\",[t._v(\"很多情况下我们需要搜索全站的内容，所以一个搜索功能的支持也是很有必要的。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果要添加搜索的支持，需要先安装一个插件，叫做 hexo-generator-searchdb，命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install hexo-generator-searchdb --save\\n\")])])]),a(\"p\",[t._v(\"然后在项目的 _config.yml 里面添加搜索设置如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"search:\\n  path: search.xml\\n  field: post\\n  format: html\\n  limit: 10000\\n\")])])]),a(\"p\",[t._v(\"然后在主题的 _config.yml 里面修改如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# Local search\\n# Dependencies: https://github. com/wzpan/hexo- generator-search\\nlocal_ search:\\n  enable: true\\n  # If auto, trigger search by changing input .\\n  # If manual, trigger search by pressing enter key or search button.\\n  trigger: auto\\n  # Show top n results per article, show all results by setting to -1\\n  top_ n_ per_ article: 5\\n  # Unescape html strings to the readable one.\\n  unescape: false\\n  # Preload the search data when the page loads.\\n  preload: false\\n\")])])]),a(\"h2\",{attrs:{id:\"部署脚本\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#部署脚本\"}},[t._v(\"#\")]),t._v(\" 部署脚本\")]),t._v(\" \"),a(\"p\",[t._v(\"最后我这边还增加了一个简易版的部署脚本，其实就是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo clean\\nhexo generate\\nhexo deploy\\n\")])])]),a(\"p\",[t._v(\"这样我们在部署发布的时候只需要执行：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"sh deploy.sh\\n\")])])]),a(\"p\",[t._v(\"就可以完成博客的更新了，非常简单。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"自定义域名\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自定义域名\"}},[t._v(\"#\")]),t._v(\" 自定义域名\")]),t._v(\" \"),a(\"p\",[t._v(\"将页面修改之后可以用上面的脚本重新部署下博客，其内容便会跟着更新。\")]),t._v(\" \"),a(\"p\",[t._v(\"另外我们也可以在 GitHub 的 Repository 里面设置域名，找到 Settings，拉到下面，可以看到有个 GitHub Pages 的配置项，下面有个 custom domain 的选项，输入你想自定义的域名地址，然后添加 CNAME 解析就好了。\")]),t._v(\" \"),a(\"p\",[t._v(\"另外下面还有一个 Enforce HTTPS 的选项，GitHub Pages 会在我们配置自定义域名之后自动帮我们配置 HTTPS 服务。刚配置完自定义域名的时候可能这个选项是不可用的，一段时间后等到其可以勾选了，直接勾选即可，这样整个博客就会变成 HTTPS 的协议的了。\")]),t._v(\" \"),a(\"p\",[t._v(\"另外有一个值得注意的地方，如果配置了自定义域名，在目前的情况下，每次部署的时候这个自定义域名的设置是会被自动清除的。所以为了避免这个情况，我们需要在项目目录下面新建一个 CNAME 文件，路径为 source/CNAME，内容就是自定义域名。\")]),t._v(\" \"),a(\"p\",[t._v(\"比如我就在 source 目录下新建了一个 CNAME 文件，内容为：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"blog.nightteam.cn\\n\")])])]),a(\"p\",[t._v(\"这样避免了每次部署的时候自定义域名被清除的情况了。\")])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}
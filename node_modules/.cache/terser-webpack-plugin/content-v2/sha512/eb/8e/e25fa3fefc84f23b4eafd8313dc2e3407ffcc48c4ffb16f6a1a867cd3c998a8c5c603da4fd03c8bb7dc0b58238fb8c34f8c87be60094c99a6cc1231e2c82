{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{547:function(t,e,a){\"use strict\";a.r(e);var s=a(20),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"建立博客\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#建立博客\"}},[t._v(\"#\")]),t._v(\" 建立博客\")]),t._v(\" \"),a(\"p\",[t._v(\"Github Pages提供了免费的服务器承载简单的博客，你只需要在仓库的设置选项中开启Github Pages功能，博客就自动生成了，GitHub提供了很多的模板供选择，同时你也可以自己从头编写。\")]),t._v(\" \"),a(\"p\",[t._v(\"[toc]\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"准备条件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#准备条件\"}},[t._v(\"#\")]),t._v(\" 准备条件\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"服务器\")]),t._v(\" \"),a(\"li\",[t._v(\"数据库\")]),t._v(\" \"),a(\"li\",[t._v(\"注册域名\")])]),t._v(\" \"),a(\"p\",[t._v(\"如果这些都没有的话，没事，照样是能搭建一个博客的。\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"GitHub 提供了 GitHub Pages 帮助我们来架设一个静态网站，解决了服务器的问题。\")]),t._v(\" \"),a(\"li\",[t._v(\"Hexo的轻量级博客框架是直接使用MarkDown进行创作的，可以直接将文章编译成静态网页文件并发布。这样文章的内容、标题、标签等信息就不必存数据库里了，直接形成静态页面。解决了数据库的问题。\")]),t._v(\" \"),a(\"li\",[t._v(\"GitHub Pages 允许每个账户创建一个名为 {username}.\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=http%3A//github.io\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://github.io\"),a(\"OutboundLink\")],1),t._v(\" 的仓库。它会自动为这个仓库分配一个 \"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=http%3A//github.io\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://github.io\"),a(\"OutboundLink\")],1),t._v(\" 的二级域名，解决了域名的问题。如果想要自定义域名的话，当然也可以支持。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"新建项目\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#新建项目\"}},[t._v(\"#\")]),t._v(\" 新建项目\")]),t._v(\" \"),a(\"p\",[t._v(\"首先在 GitHub 新建一个仓库（Repository），名称为 {username}.\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=http%3A//github.io\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://github.io\"),a(\"OutboundLink\")],1),t._v(\"，注意这个名比较特殊，必须要是 \"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=http%3A//github.io\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://github.io\"),a(\"OutboundLink\")],1),t._v(\" 为后缀结尾的。比如 NightTeam 的 GitHub 用户名就叫 NightTeam，那我就新建一个 \"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=http%3A//nightteam.github.io\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://nightteam.github.io\"),a(\"OutboundLink\")],1),t._v(\"，新建完成之后就可以进行后续操作了。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"如果 GitHub 没有配置 SSH 连接的建议配置一下，这样后面在部署博客的时候会很方便。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"安装环境\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装环境\"}},[t._v(\"#\")]),t._v(\" 安装环境\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"安装-node-js\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装-node-js\"}},[t._v(\"#\")]),t._v(\" 安装 Node.js\")]),t._v(\" \"),a(\"p\",[t._v(\"首先安装 Node.js，下载地址：\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn/download/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://nodejs.org/zh-cn/download/\"),a(\"OutboundLink\")],1),t._v(\"，下载安装包。\")]),t._v(\" \"),a(\"p\",[t._v(\"安装完毕之后，确保环境变量配置好，能正常使用 \"),a(\"code\",[t._v(\"npm\")]),t._v(\" 命令。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"可参考《安装 Node.js》\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"安装git工具\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装git工具\"}},[t._v(\"#\")]),t._v(\" 安装git工具\")]),t._v(\" \"),a(\"p\",[t._v(\"略\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"安装-hexo\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装-hexo\"}},[t._v(\"#\")]),t._v(\" 安装 Hexo\")]),t._v(\" \"),a(\"p\",[t._v(\"接下来就需要安装 Hexo 了，这是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客。\")]),t._v(\" \"),a(\"p\",[t._v(\"在合适的地方新建MyHexoBlogs文件夹用来存放个人博客文件。\")]),t._v(\" \"),a(\"p\",[t._v(\"在该目录下右键点击\"),a(\"code\",[t._v(\"Git Bash Here\")]),t._v(\"，打开git的控制台窗口，安装命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install -g hexo-cli\\n\")])])]),a(\"p\",[t._v(\"安装完成之后，输入\"),a(\"code\",[t._v(\"hexo -v\")]),t._v(\"验证是否安装成功。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"可参考《安装 Hexo》\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"初始化项目\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#初始化项目\"}},[t._v(\"#\")]),t._v(\" 初始化项目\")]),t._v(\" \"),a(\"p\",[t._v(\"在MyBlogs文件夹下新建mysite项目，并对其进行初始化。\")]),t._v(\" \"),a(\"p\",[t._v(\"输入\"),a(\"code\",[t._v(\"hexo init\")]),t._v(\"初始化文件夹，\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo init mysite\\n\")])])]),a(\"p\",[t._v(\"输入\"),a(\"code\",[t._v(\"cd\")]),t._v(\"进入文件夹，\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"cd mysite\\n\")])])]),a(\"p\",[t._v(\"接着输入\"),a(\"code\",[t._v(\"npm install\")]),t._v(\"安装必备的组件。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install\\n\")])])]),a(\"p\",[t._v(\"此时，会在MyBlogs文件夹下新建mysite文件夹，并在其内部生成相应的项目文件。\")]),t._v(\" \"),a(\"p\",[t._v(\"这样mysite文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹。\")]),t._v(\" \"),a(\"p\",[t._v(\"接下来我们首先进入新生成的文件夹里面，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo generate\\n\")])])]),a(\"p\",[t._v(\"可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo serve\\n\")])])]),a(\"p\",[t._v(\"运行之后命令行输出如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"INFO  Start processing\\nINFO  Hexois running at http://localhost:4000 . Press Ctrl+C to stop \\n\")])])]),a(\"p\",[t._v(\"此时在本地打开浏览器，通过http://localhost:4000便可访问基于Hexo的个人博客主页了。\")]),t._v(\" \"),a(\"p\",[t._v(\"这样一个博客的框架就出来了。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"部署\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#部署\"}},[t._v(\"#\")]),t._v(\" 部署\")]),t._v(\" \"),a(\"p\",[t._v(\"略\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"修改主题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#修改主题\"}},[t._v(\"#\")]),t._v(\" 修改主题\")]),t._v(\" \"),a(\"p\",[t._v(\"目前来看，整个页面的样式个人感觉并不是那么好看，想换一个风格，这就涉及到主题的配置了。目前 Hexo 里面应用最多的主题基本就是 Next 主题了，个人感觉这个主题还是挺好看的，另外它支持的插件和功能也极为丰富，配置了这个主题，我们的博客可以支持更多的扩展功能，比如阅览进度条、中英文空格排版、图片懒加载等等。\")]),t._v(\" \"),a(\"p\",[t._v(\"那么首先就让我们来安装下 Next 这个主题吧，目前 Next 主题已经更新到 7.x 版本了，我们可以直接到 Next 主题的 GitHub Repository 上把这个主题下载下来。\")]),t._v(\" \"),a(\"p\",[t._v(\"主题的 GitHub 地址是：\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//github.com/theme-next/hexo-theme-next\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://github.com/theme-next/hexo-theme-next\"),a(\"OutboundLink\")],1),t._v(\"，我们可以直接把 master 分支 Clone 下来。\")]),t._v(\" \"),a(\"p\",[t._v(\"首先命令行进入到项目的根目录，执行如下命令即可：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"git clone https://github.com/theme-next/hexo-theme-next themes/next\\n\")])])]),a(\"p\",[t._v(\"执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后我们需要修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"theme: next\\n\")])])]),a(\"p\",[t._v(\"然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了，预览效果如下：\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"主题配置\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主题配置\"}},[t._v(\"#\")]),t._v(\" 主题配置\")]),t._v(\" \"),a(\"p\",[t._v(\"现在我们已经成功切换到 next 主题上面了，接下来我们就对主题进行进一步地详细配置吧，比如修改样式、增加其他各项功能的支持，下面逐项道来。\")]),t._v(\" \"),a(\"p\",[t._v(\"Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"样式\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#样式\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"样式\")])]),t._v(\" \"),a(\"p\",[t._v(\"Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"scheme: Pisces\\n\")])])]),a(\"p\",[t._v(\"另外还有几个可选项，比如：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# scheme: Muse\\n#scheme: Mist\\nscheme: Pisces\\n#scheme: Gemini\\n\")])])]),a(\"p\",[t._v(\"大家可以自行根据喜好选择。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"favicon\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#favicon\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"favicon\")])]),t._v(\" \"),a(\"p\",[t._v(\"favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。\")]),t._v(\" \"),a(\"p\",[t._v(\"但这并不意味着我们需要自己用 PS 自己来设计，已经有一个网站可以直接将图片转化为站点小图标，站点链接为：\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//realfavicongenerator.net\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://realfavicongenerator.net\"),a(\"OutboundLink\")],1),t._v(\"，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。\")]),t._v(\" \"),a(\"p\",[t._v(\"图标下载下来之后把它放在 themes/next/source/images 目录下面。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"favicon:\\nsmall: /images/favicon-16x16. png\\nmedium: /images/favicon-32x32. png\\napple_ touch_ icon: /images/apple-touch- icon. png\\nsafari_ pinned tab: /images/safari-pinned-tab.svg\\n\")])])]),a(\"p\",[t._v(\"配置完成之后刷新页面，整个页面的标签图标就被更新了。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"avatar\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#avatar\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"avatar\")])]),t._v(\" \"),a(\"p\",[t._v(\"avatar 这个就类似站点的头像，如果设置了这个，会在站点的作者信息旁边额外显示一个头像，比如我这边有一张 avatar.png\")]),t._v(\" \"),a(\"p\",[t._v(\"将其放置到 themes/next/source/images/avatar.png 路径，然后在主题 _config.yml 文件下编辑 avatar 的配置，修改为正确的路径即可。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# Sidebar Avatar\\navatar:\\n  # In theme directory (source/ images): / images/avatar.gif\\n  # In site directory (source/uploads): /uploads/avatar .gif\\n  # You can also use other linking images.\\n  ur1: /images/avatar . png\\n  # If true, the avatar would be dispalyed in circle.\\n  rounded: true\\n  # If true, the avatar would be rotated with the cursor.\\n  rotated: true\\n\")])])]),a(\"p\",[t._v(\"这里有 rounded 选项是是否显示圆形，rotated 是是否带有旋转效果，大家可以根据喜好选择是否开启。\")]),t._v(\" \"),a(\"p\",[t._v(\"配置完成之后就会显示头像。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"rss\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rss\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"rss\")])]),t._v(\" \"),a(\"p\",[t._v(\"博客一般是需要 RSS 订阅的，如果要开启 RSS 订阅，这里需要安装一个插件，叫做 hexo-generator-feed，安装完成之后，站点会自动生成 RSS Feed 文件，安装命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install hexo-generator-feed --save\\n\")])])]),a(\"p\",[t._v(\"在项目根目录下运行这个命令，安装完成之后不需要其他的配置，以后每次编译生成站点的时候就会自动生成 RSS Feed 文件了。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"code\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#code\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"code\")])]),t._v(\" \"),a(\"p\",[t._v(\"我们可以将代码块显示的默认的代码块颜色修改为黑色，并把复制按钮的样式修改为类似 Mac 的样式，修改 _config.yml 文件的 codeblock 区块如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"codeblock:\\n  # Code Highlight theme\\n  # Available values: normal| night| night eighties| night blue| night br\\n  # See: https://github. com/ chriskempson/ tomorrow- theme\\n  highlight_ theme: night bright\\n  # Add copy button on codeblock\\n  copy_ button:\\n\\tenable: true\\n\\t# Show text copy result.\\n\\tshow_ result: true\\n\\t# Available values: default| flat| mac\\n\\tstyle: mac\\n\")])])]),a(\"h3\",{attrs:{id:\"top\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#top\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"top\")])]),t._v(\" \"),a(\"p\",[t._v(\"我们在浏览网页的时候，如果已经看完了想快速返回到网站的上端，一般都是有一个按钮来辅助的，这里也支持它的配置，修改 _config.yml 的 back2top 字段即可，我的设置如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"back2top :\\n  enable: true\\n  # Back to top in sidebar.\\n  sidebar: false\\n  # Scrol1 percent label in b2t button.\\n  scrollpercent: true\\n\")])])]),a(\"p\",[t._v(\"enable 默认为 true，即默认显示。sidebar 如果设置为 true，按钮会出现在侧栏下方。scrollpercent 就是显示阅读百分比。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"reading-process\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#reading-process\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"reading_process\")])]),t._v(\" \"),a(\"p\",[t._v(\"reading_process，阅读进度。大家可能注意到有些站点的最上侧会出现一个细细的进度条，代表页面加载进度和阅读进度，如果大家想设置的话也可以试试，我将其打开了，修改 _config.yml 如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('reading_ progress:\\n  enable: true\\n  # Available values: top| bottom\\n  position: top \\n  color: \"#222\"\\n  height: 2px\\n')])])]),a(\"h3\",{attrs:{id:\"bookmark\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bookmark\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"bookmark\")])]),t._v(\" \"),a(\"p\",[t._v(\"书签，可以根据阅读历史记录，在下次打开页面的时候快速帮助我们定位到上次的位置，大家可以根据喜好开启和关闭，如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('bookmark:\\n  enable: false\\n  # customize the color of the bookmark.\\n  color:“#222\"\\n  # If auto, save the reading progress when closing the page or clicking the t\\n  # If manual, only save it by clicking the bookmark-icon.\\n  save: auto\\n')])])]),a(\"h3\",{attrs:{id:\"github-banner\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#github-banner\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"github_banner\")])]),t._v(\" \"),a(\"p\",[t._v(\"在一些技术博客上，大家可能注意到在页面的右上角有个 GitHub 图标，点击之后可以跳转到其源码页面，可以为 GitHub Repository 引流，大家如果想显示的话可以自行选择打开，配置如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# `Follow me on GitHub’ banner in the top-right corner.\\ngithub_ banner:\\n  enable: true\\n  permalink: https://github. com/ \\n  title: zervan GitHub\\n\")])])]),a(\"p\",[t._v(\"可以看到在页面右上角显示了 GitHub 的图标，点击可以进去到 Repository 页面。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"gitalk\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gitalk\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"gitalk\")])]),t._v(\" \"),a(\"p\",[t._v(\"由于 Hexo 的博客是静态博客，而且也没有连接数据库的功能，所以它的评论功能是不能自行集成的，但可以集成第三方的服务。\")]),t._v(\" \"),a(\"p\",[t._v(\"Next 主题里面提供了多种评论插件的集成，有 changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte 这些。可以利用 GitHub 的 Issue 来当评论。\")]),t._v(\" \"),a(\"p\",[t._v(\"首先需要在 GitHub 上面注册一个 OAuth Application，链接为：\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//github.com/settings/applications/new\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://github.com/settings/applications/new\"),a(\"OutboundLink\")],1),t._v(\"，注册完毕之后拿到 Client ID、Client Secret 就可以了。\")]),t._v(\" \"),a(\"p\",[t._v(\"首先需要在 _config.yml 文件的 comments 区域配置使用 gitalk：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# Multiple Comment System Support\\ncomments:\\n  # Available values: tabs| buttons\\n  style: tabs\\n  # Choose a comment system to be displayed by default.\\n  # Available values: changyan | disqus| disqusjs| facebook_ .comments_ plugin\\n  active: gitalk\\n\")])])]),a(\"p\",[t._v(\"主要是 comments.active 字段选择对应的名称即可。\")]),t._v(\" \"),a(\"p\",[t._v(\"然后找打 gitalk 配置，添加它的各项配置：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# Gitalk\\n# Demo: https://gitalk. github.io\\n# For more information: https://github. com/gita1k/gitalk\\ngitalk:\\n  enable: true\\n  github_ id: NightTeam\\n  repo: nightteam. github.io # Repository name to store issues\\n  client_ id: {your client id} # GitHub Application Client ID\\n  client_ secret: {your client secret} # GitHub Application Client Secret\\n  admin_ user: germey # GitHub repo owner and collaborators, only these guys C\\n  distraction_ free_ mode: true # Facebook-like distraction free mode\\n  # Gitalk's display language depends on user's browser or system environment\\n  # If you want everyone visiting your site to see a uniform language, you CE\\n  # Available values: en| es-ES| fr | ru| zh-CN| zh-TW\\n  language: zh-CN\\n\")])])]),a(\"p\",[t._v(\"配置完成之后 gitalk 就可以使用了，点击进入文章页面，GitHub 授权登录之后，评论的内容会自动出现在 Issue 里面。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"pangu\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#pangu\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"pangu\")])]),t._v(\" \"),a(\"p\",[t._v(\"如果你希望写中文和英文的时候中间要留有间距，一个简单直接的方法就是中间加个空格，但某些情况下可能习惯性不加或者忘记加了，这就导致中英文混排并不是那么美观。\")]),t._v(\" \"),a(\"p\",[t._v(\"pangu 就是来解决这个问题的，我们只需要在主题里面开启这个选项，在编译生成页面的时候，中英文之间就会自动添加空格，看起来更加美观。\")]),t._v(\" \"),a(\"p\",[t._v(\"具体的修改如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"pangu: true\\n\")])])]),a(\"h3\",{attrs:{id:\"math\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#math\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"math\")])]),t._v(\" \"),a(\"p\",[t._v(\"可能在一些情况下我们需要写一个公式，比如演示一个算法推导过程，MarkDown 是支持公式显示的，Hexo 的 Next 主题同样是支持的。\")]),t._v(\" \"),a(\"p\",[t._v(\"Next 主题提供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//theme-next.org/docs/third-party-services/math-equations\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://theme-next.org/docs/third-party-services/math-equations\"),a(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"所以我这里选择了 mathjax，通过修改配置即可启用：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"math:\\n  enable: true\\n\\n  # Default (true) will load mathjax / katex script on demand.\\n  # That is it only render those page which has `mathjax: true` in Front -matt\\n  # Ifyou set it to false, it will load mathjax / katex srcipt EVERY PAGE.\\n  per_ page: true\\n\\n  # hexo-renderer-pandoc (or hexo- renderer- kramed) required for fu1l MathJax\\n  mathjax:\\n\\tenable: true\\n\\t# See: https://mhchem. github. io/MathJax - mhchem/\\n\\tmhchem: true\\n\")])])]),a(\"p\",[t._v(\"mathjax 的使用需要我们额外安装一个插件，叫做 hexo-renderer-kramed，另外也可以安装 hexo-renderer-pandoc，命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm un hexo-renderer-marked --save\\nnpm i hexo-renderer-kramed --save\\n\")])])]),a(\"p\",[t._v(\"另外还有其他的插件支持，大家可以到官方文档查看。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"pjax\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#pjax\"}},[t._v(\"#\")]),t._v(\" \"),a(\"strong\",[t._v(\"pjax\")])]),t._v(\" \"),a(\"p\",[t._v(\"可能大家听说过 Ajax，没听说过 pjax，这个技术实际上就是利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，有可以做到无刷新加载。\")]),t._v(\" \"),a(\"p\",[t._v(\"要开启这个功能需要先将 pjax 功能开启，然后安装对应的 pjax 依赖库，首先修改 _config.yml 修改如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"pjax: true\\n\")])])]),a(\"p\",[t._v(\"然后安装依赖库，切换到 next 主题下，然后安装依赖库：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"$ cd themes/next\\n$ git clone theme-next/theme-next-pjax source/lib/pjax\\n\")])])]),a(\"h2\",{attrs:{id:\"文章\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文章\"}},[t._v(\"#\")]),t._v(\" 文章\")]),t._v(\" \"),a(\"p\",[t._v(\"现在整个站点只有一篇文章，那么我们怎样来增加其他的文章呢？\")]),t._v(\" \"),a(\"p\",[t._v(\"这个很简单，只需要调用 Hexo 提供的命令即可，比如我们要新建一篇「HelloWorld」的文章，命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo new hello-world\\n\")])])]),a(\"p\",[t._v(\"创建的文章会出现在 \"),a(\"code\",[t._v(\"source/_posts\")]),t._v(\" 文件夹下，是 MarkDown 格式。\")]),t._v(\" \"),a(\"p\",[t._v(\"在文章开头通过如下格式添加必要信息：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"---\\ntitle: 标题 # 自动创建，如hello-world\\ndate: 日期 # 自动创建，如2019-09-22 01:47:21\\ntags:\\n- 标签1\\n- 标签2\\n- 标签3\\ncategories:\\n- 分类1\\n- 分类2\\n---\\n\")])])]),a(\"p\",[t._v(\"开头下方撰写正文，MarkDown 格式书写即可。\")]),t._v(\" \"),a(\"p\",[t._v(\"这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：\"),a(\"a\",{attrs:{href:\"https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/writing.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://hexo.io/zh-cn/docs/writing.html\"),a(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"标签页\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#标签页\"}},[t._v(\"#\")]),t._v(\" 标签页\")]),t._v(\" \"),a(\"p\",[t._v(\"现在我们的博客只有首页、文章页，如果我们想要增加标签页，可以自行添加，这里 Hexo 也给我们提供了这个功能，在根目录执行命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo new page tags\\n\")])])]),a(\"p\",[t._v(\"执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件，内容就只有这样子的：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"---\\ntitle: tags\\ndate:2021-04-01 17:41:16\\n---\\n\")])])]),a(\"p\",[t._v(\"我们可以自行添加一个 type 字段来指定页面的类型：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"type: tags\\ncomments:false \\n\")])])]),a(\"p\",[t._v(\"然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"menu:\\n  home: /|| home\\n  #about: /about/ || user\\n  tags: /tags/ || tags\\n  #categories: /categories/ || th\\n  archives: /archives/ || archive\\n  #schedule: /schedule/ || calendar\\n  #sitemap: /sitemap.xml || sitemap\\n  #commonweal: /404/ || heartbeat\\n\")])])]),a(\"p\",[t._v(\"这样重新本地启动看下页面状态，左侧导航也出现了标签，点击之后右侧会显示标签的列表。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"分类页\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分类页\"}},[t._v(\"#\")]),t._v(\" 分类页\")]),t._v(\" \"),a(\"p\",[t._v(\"分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo new page categories\\n\")])])]),a(\"p\",[t._v(\"然后同样地，会生成一个 source/categories/index.md 文件。\")]),t._v(\" \"),a(\"p\",[t._v(\"我们可以自行添加一个 type 字段来指定页面的类型：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"type: categories\\ncomments: false\\n\")])])]),a(\"p\",[t._v(\"然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"menu:\\n  home: / || home\\n  #about: /about/ || user\\n  tags: /tags/ || tags\\n  categories: /categories/ || th\\n  archives: /archives/ || archive\\n  #schedule: /schedule/ || calendar\\n  #sitemap: /sitemap.xml || sitemap\\n  #commonweal: /404/ || heartbeat\\n\")])])]),a(\"p\",[t._v(\"这样页面就会增加分类的支持。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"搜索页\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#搜索页\"}},[t._v(\"#\")]),t._v(\" 搜索页\")]),t._v(\" \"),a(\"p\",[t._v(\"很多情况下我们需要搜索全站的内容，所以一个搜索功能的支持也是很有必要的。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果要添加搜索的支持，需要先安装一个插件，叫做 hexo-generator-searchdb，命令如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install hexo-generator-searchdb --save\\n\")])])]),a(\"p\",[t._v(\"然后在项目的 _config.yml 里面添加搜索设置如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"search:\\n  path: search.xml\\n  field: post\\n  format: html\\n  limit: 10000\\n\")])])]),a(\"p\",[t._v(\"然后在主题的 _config.yml 里面修改如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# Local search\\n# Dependencies: https://github. com/wzpan/hexo- generator-search\\nlocal_ search:\\n  enable: true\\n  # If auto, trigger search by changing input .\\n  # If manual, trigger search by pressing enter key or search button.\\n  trigger: auto\\n  # Show top n results per article, show all results by setting to -1\\n  top_ n_ per_ article: 5\\n  # Unescape html strings to the readable one.\\n  unescape: false\\n  # Preload the search data when the page loads.\\n  preload: false\\n\")])])]),a(\"h2\",{attrs:{id:\"部署脚本\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#部署脚本\"}},[t._v(\"#\")]),t._v(\" 部署脚本\")]),t._v(\" \"),a(\"p\",[t._v(\"最后我这边还增加了一个简易版的部署脚本，其实就是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"hexo clean\\nhexo generate\\nhexo deploy\\n\")])])]),a(\"p\",[t._v(\"这样我们在部署发布的时候只需要执行：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"sh deploy.sh\\n\")])])]),a(\"p\",[t._v(\"就可以完成博客的更新了，非常简单。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"自定义域名\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自定义域名\"}},[t._v(\"#\")]),t._v(\" 自定义域名\")]),t._v(\" \"),a(\"p\",[t._v(\"将页面修改之后可以用上面的脚本重新部署下博客，其内容便会跟着更新。\")]),t._v(\" \"),a(\"p\",[t._v(\"另外我们也可以在 GitHub 的 Repository 里面设置域名，找到 Settings，拉到下面，可以看到有个 GitHub Pages 的配置项，下面有个 custom domain 的选项，输入你想自定义的域名地址，然后添加 CNAME 解析就好了。\")]),t._v(\" \"),a(\"p\",[t._v(\"另外下面还有一个 Enforce HTTPS 的选项，GitHub Pages 会在我们配置自定义域名之后自动帮我们配置 HTTPS 服务。刚配置完自定义域名的时候可能这个选项是不可用的，一段时间后等到其可以勾选了，直接勾选即可，这样整个博客就会变成 HTTPS 的协议的了。\")]),t._v(\" \"),a(\"p\",[t._v(\"另外有一个值得注意的地方，如果配置了自定义域名，在目前的情况下，每次部署的时候这个自定义域名的设置是会被自动清除的。所以为了避免这个情况，我们需要在项目目录下面新建一个 CNAME 文件，路径为 source/CNAME，内容就是自定义域名。\")]),t._v(\" \"),a(\"p\",[t._v(\"比如我就在 source 目录下新建了一个 CNAME 文件，内容为：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-text extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"blog.nightteam.cn\\n\")])])]),a(\"p\",[t._v(\"这样避免了每次部署的时候自定义域名被清除的情况了。\")])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}
{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{552:function(t,a,s){\"use strict\";s.r(a);var r=s(20),i=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"git实际操作\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git实际操作\"}},[t._v(\"#\")]),t._v(\" Git实际操作\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"基本操作\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本操作\"}},[t._v(\"#\")]),t._v(\" 基本操作\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-init-初始化仓库\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-init-初始化仓库\"}},[t._v(\"#\")]),t._v(\" git init--初始化仓库\")]),t._v(\" \"),s(\"p\",[t._v(\"如果要通过git进行版本管理，必须要先初始化仓库。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"mkdir git-tutorial\\ncd git-tutorial\\ngit init\\n\")])])]),s(\"p\",[t._v(\"如果初始化成功，执行了git init命令的目录下就会生成.git目录这个.git目录里存储着管理当前目录内容所需的仓库数据。\\n在Git中，我们将这个目录的内容称为“附属于该仓库的工作树”。\\n文件的编辑等操作在工作树中进行，然后记录到仓库中，以此管理文件的历史快照。如果想将文件恢复到原先的状态，可以从仓库中调取之前的快照，在工作树中打开。开发者可以通过这种方式获取以往的文件。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-status-查看仓库的状态\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-status-查看仓库的状态\"}},[t._v(\"#\")]),t._v(\" git status--查看仓库的状态\")]),t._v(\" \"),s(\"p\",[t._v(\"git status命令用于显示仓库的状态。工作树和仓库在被操作的过程中，状态会不断发生变化。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-add-向暂存区添加文件\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-add-向暂存区添加文件\"}},[t._v(\"#\")]),t._v(\" git add--向暂存区添加文件\")]),t._v(\" \"),s(\"p\",[t._v(\"如果只是用Git仓库的工作树创建了文件，那么该文件并不会被记入Git仓库的版本管理对象当中。因此我们用git status命令查看\\nREADME.md文件时，它会显示在Untracked files 里。\\n要想让文件成为Git仓库的管理对象，就需要用git add命令将其加人暂存区( Stage或者Index)中。暂存区是提交之前的一个临时区域。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[t._v(\"git add README.md\\ngit status\\n\")])])]),s(\"p\",[t._v(\"将REMADE.md文件加入暂存区后，git status命令的显示结果发生了变化。\")]),t._v(\" \"),s(\"p\",[t._v(\"REMADE.md文件显示在Changes to be commintted中了。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-commit-保存仓库的历史记录\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-commit-保存仓库的历史记录\"}},[t._v(\"#\")]),t._v(\" git commit--保存仓库的历史记录\")]),t._v(\" \"),s(\"p\",[t._v(\"git commit命令可以将当前暂存区中的文件实际保存到仓库的历史记录中。通过这些记录，我们就可以在工作树中复原文件。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-log-查看提交日志\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-log-查看提交日志\"}},[t._v(\"#\")]),t._v(\" git log--查看提交日志\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-diff-查看更改前后的差别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-diff-查看更改前后的差别\"}},[t._v(\"#\")]),t._v(\" git diff--查看更改前后的差别\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"分支操作\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分支操作\"}},[t._v(\"#\")]),t._v(\" 分支操作\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-branch-显示分支一览表\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-branch-显示分支一览表\"}},[t._v(\"#\")]),t._v(\" git branch--显示分支一览表\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-checked-d-创建、切换分支\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-checked-d-创建、切换分支\"}},[t._v(\"#\")]),t._v(\" git checked -d--创建、切换分支\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"特性分支\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#特性分支\"}},[t._v(\"#\")]),t._v(\" 特性分支\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"主干分支\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主干分支\"}},[t._v(\"#\")]),t._v(\" 主干分支\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-merge-合并分支\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-merge-合并分支\"}},[t._v(\"#\")]),t._v(\" git merge--合并分支\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-log-graph-以图表形式查看分支\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-log-graph-以图表形式查看分支\"}},[t._v(\"#\")]),t._v(\" git log -graph--以图表形式查看分支\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"更改提交的操作\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#更改提交的操作\"}},[t._v(\"#\")]),t._v(\" 更改提交的操作\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-reset-回溯历史版本\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-reset-回溯历史版本\"}},[t._v(\"#\")]),t._v(\" git reset--回溯历史版本\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"消除冲突\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#消除冲突\"}},[t._v(\"#\")]),t._v(\" 消除冲突\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-commit-amend-修改提交信息\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-commit-amend-修改提交信息\"}},[t._v(\"#\")]),t._v(\" git commit -amend--修改提交信息\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-rebase-i-压缩历史\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-rebase-i-压缩历史\"}},[t._v(\"#\")]),t._v(\" git rebase -i--压缩历史\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"推送至远程仓库\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#推送至远程仓库\"}},[t._v(\"#\")]),t._v(\" 推送至远程仓库\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-remote-add-添加远程仓库\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-remote-add-添加远程仓库\"}},[t._v(\"#\")]),t._v(\" git remote add--添加远程仓库\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-push-推送至远程仓库\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-push-推送至远程仓库\"}},[t._v(\"#\")]),t._v(\" git push--推送至远程仓库\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"从远程仓库中获取\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#从远程仓库中获取\"}},[t._v(\"#\")]),t._v(\" 从远程仓库中获取\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-clone-获取远程仓库\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-clone-获取远程仓库\"}},[t._v(\"#\")]),t._v(\" git clone--获取远程仓库\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"git-pull-获取最新的远程仓库分支\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-pull-获取最新的远程仓库分支\"}},[t._v(\"#\")]),t._v(\" git pull--获取最新的远程仓库分支\")]),t._v(\" \"),s(\"p\",[t._v(\"至此为止，我们所需要掌握的git操作已经结束。在这里，我们向大家介绍一个学习网站，Learn git branching，是学习git基本操作的网站。注重树形结构的学习方式非常适合初学者使用。\")])])}),[],!1,null,null,null);a.default=i.exports}}]);","extractedComments":[]}